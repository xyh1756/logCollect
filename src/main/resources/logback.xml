<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
	<jmxConfigurator />
	<!-- 以<configuration>开头，后面有零个或多个<appender>元素  -->
	<!-- 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</layout>
	</appender>
	<!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>logs/recsys.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<FileNamePattern>logs/recsys.log.%i.bak</FileNamePattern>
			<MinIndex>1</MinIndex>
			<MaxIndex>12</MaxIndex>
		</rollingPolicy>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>100MB</MaxFileSize>
		</triggeringPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>
		</layout>
	</appender>
	<!--这里指定logger name 是为jmx设置日志级别做铺垫 -->
	<!-- 有零个或多个<logger>元素，有最多一个<root>元素 .
		root 元素定义日志级别，日志输出方式等；
		logger可以指定一个类的logger，也可以指定一个包的logger，特定logger可以重新指定日志级别，输出方式(输出方式为新增的输出，默认root还是会生效)等信息
	 -->
	 <!--
	<root level="INFO">  
    	<appender-ref ref="STDOUT" />  
  	</root>
  	 
	<logger name="com.wankun.textsplit.TestLogback" level="DEBUG">
		<appender-ref ref="STDOUT" /> 
		<appender-ref ref="FILE" />
	</logger>  
  	
	<logger name="com.wankun.textsplit">
		<level value="DEBUG" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</logger>
	 -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />  
	</root>
</configuration>
